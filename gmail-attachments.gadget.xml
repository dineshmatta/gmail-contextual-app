<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Extractor"
    description="Attachment details"
    height="25"
    author="Gangadhar kairi"
    author_email="gkairi@gmail.com"
    author_location="india">

    <!-- Declare feature dependencies. -->

    <!-- This one is not specific to Gmail contextual gadgets. -->
    <Require feature="dynamic-height"/>

    <Require feature="opensocial-0.9" />
    <Require feature="osapi" />

    <!-- The next feature, Caja, is optional, and is supported for
     use only within test domains. Uncomment the tag only for
     non-production gadgets. -->
    <!--<Require feature="caja"/>-->

    <!-- The next feature, google.contentmatch, is required for all
     Gmail contextual gadgets.
     <Param> - specify one or more comma-separated extractor IDs in
     a param named "extractors". This line is overridden by the extractor ID
     in the manifest, but is still expected to be present. -->
    <Require feature="google.contentmatch">
      <Param name="extractors">
        google.com:MessageIDExtractor,google.com:SenderEmailExtractor
      </Param>
    </Require>

  </ModulePrefs>

  <!-- Define the content type and display location. The settings
   "html" and "card" are required for all Gmail contextual gadgets. -->
  <Content type="html" view="card">
    <![CDATA[
      <script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
      <script type="text/javascript">
      	//Callback funtion
      	var google_app_service_url ='https://script.google.com/macros/s/AKfycbxJbqTDC3IO21DhsFIcHVV7k1MEnF4eYhTO274gLFFvWXJ-mug/exec';
      	
        window.jsonCallback = function(attachmentDetails){
			console.log('jsonCallback table : '+attachmentDetails);
			var details ='<h2>No attacments found!!<h2>';
			if(attachmentDetails!=null && attachmentDetails.length>0){
				details = '<table border="1"><tr><th>Title</th><th>Size(in bytes)</th><th>View</th></tr>';
				for (var i = 0; i < attachmentDetails.length; i++) {
					details += '<tr><td>' +attachmentDetails[i].title +'</td><td>'+ attachmentDetails[i].size +'</td><td>'+ '<a href="'+attachmentDetails[i].link+'" target="_blank">View</a></td></tr>';
				}
				details +='</table>';
			}
			console.log('Html table : '+details);
			jQuery('<div>'+details+'</div>').appendTo('body');
		}

        matches = google.contentmatch.getContentMatches();
        
        console.log('JSON.stringify(matches) response : ' +JSON.stringify(matches));
        console.log(' matches : ' +matches);
        var messageid='141eb26bfe94e733';
        for(var match in matches) {
            for(var key in matches[match]) {
                if(key == 'message_id') {
                	//Stores the message id from the email thread
                    messageid = matches[match][key];
                    console.log('found messageid : '+messageid);
                }
            }
        }
        
        console.log('JSON response : ' +JSON.stringify(matches));
        var gasUrl = google_app_service_url+'?messageId='+messageid+'&callback=jsonCallback';
        console.log('URL to get attachments : ' +gasUrl);

		//google apps script call to get attachment details

        
        gadgets.window.adjustHeight(100);


    function init() {
      // Hit the server, passing in a signed request (and OpenSocial ID), to see if we know who the user is.
      osapi.http.get({
        'href' : 'https://script.google.com/macros/s/AKfycbxJbqTDC3IO21DhsFIcHVV7k1MEnF4eYhTO274gLFFvWXJ-mug/exec',
        'format' : 'json',
        'authz' : 'signed'
      }).execute(handleLoadResponse);
    }

    function handleLoadResponse(data) {
      // User exists, OpenID must have occurred previously.
      if (data.content != undefined && data.content.user_exists) {
        document.getElementById('output').innerHTML = 'user exists';
      // User doesn't exist, need to do OpenID to match user ID to OpenID.
      } else {
        var url_root = data.content.popup;
        // Retrieve the domain of the current user. gadgets.util.getUrlParameters()['parent'] returns a value
        // of of the form: http(s)://mail.google.com/mail/domain.com/html for Gmail (other containers are similar).
        // The example below shows a regular expression for use with Gmail. For Calendar, use this regular
        // expression instead: /calendar\/hosted\/([^\/]+)/
        var domain = gadgets.util.getUrlParameters()['parent'].match(/.+\/a\/(.+)\/html/)[1];

        var url = url_root + '?domain=' + domain;

        var button = document.createElement('a');
        button.setAttribute('href', 'javascript:void(0);');
        button.setAttribute('onclick', 'openPopup("' + url + '")');

        var text = document.createTextNode('Sign in');
        button.appendChild(text);

        document.getElementById('output').appendChild(button);
      }
    }

    function openPopup(url) {
      var popup = window.open(url, 'OpenID','height=200,width=200');

      // Check every 100 ms if the popup is closed.
      finishedInterval = setInterval(function() {
        // If the popup is closed, we've either finished OpenID, or the user closed it. Verify with the server in case the
        // user closed the popup.
        if (popup.closed) {
          osapi.http.get({
            'href' : 'https://script.google.com/macros/s/AKfycbxJbqTDC3IO21DhsFIcHVV7k1MEnF4eYhTO274gLFFvWXJ-mug/exec',
            'format' : 'json',
            'authz' : 'signed'
          }).execute(handleLoadResponse);

          clearInterval(finishedInterval);
        }
      }, 100);
    }

    gadgets.util.registerOnLoadHandler(init);

          
      </script>
      <div id="output"></div>
    ]]>
    <form id="myForm"> 
        <h2> <div id='loading'>Loading attachments details... </div></h2>
        </form>
  </Content>
</Module>

